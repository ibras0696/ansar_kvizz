from __future__ import annotations

from dataclasses import dataclass
from datetime import UTC, datetime
from typing import Iterable, List, Sequence

from sqlalchemy import func, select
from sqlalchemy.ext.asyncio import AsyncSession

from quizbot.models import Game, GameParticipant, Player, Team, TeamMember
from quizbot.services.game_state import get_state, reset_round as reset_round_state


@dataclass
class BuzzerResult:
    """
    –ò—Ç–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è ¬´–ë–ê–ó–ó–ï–†¬ª.

    :ivar message: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫—É.
    :ivar position: –ü–æ–∑–∏—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –æ—á–µ—Ä–µ–¥–∏ (None, –µ—Å–ª–∏ –Ω–µ –≤—Å—Ç–∞–ª–∞).
    :ivar team: –ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.
    """

    message: str
    position: int | None
    team: Team | None


async def get_or_create_player(
    session: AsyncSession, tg_user_id: int, username: str | None, full_name: str | None
) -> Player:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ players.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param tg_user_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è (first_name + last_name).
    :return: –≠–∫–∑–µ–º–ø–ª—è—Ä Player.
    """

    player = await session.scalar(select(Player).where(Player.tg_user_id == tg_user_id))
    if player:
        # –û–±–Ω–æ–≤–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.
        updated = False
        if username and player.username != username:
            player.username = username
            updated = True
        if full_name and player.full_name != full_name:
            player.full_name = full_name
            updated = True
        if updated:
            await session.flush()
        return player

    player = Player(tg_user_id=tg_user_id, username=username, full_name=full_name)
    session.add(player)
    await session.flush()
    return player


async def get_player_team(session: AsyncSession, player: Player) -> Team | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ—Å—Ç–æ–∏—Ç –∏–≥—Ä–æ–∫.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param player: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞.
    :return: –ö–æ–º–∞–Ω–¥–∞ –∏–ª–∏ None.
    """

    query = (
        select(Team)
        .join(TeamMember, TeamMember.team_id == Team.id)
        .where(TeamMember.player_id == player.id)
    )
    return await session.scalar(query)


async def register_team(session: AsyncSession, player: Player, team_name: str) -> Team:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param player: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞.
    :param team_name: –ñ–µ–ª–∞–µ–º–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã.
    :return: –ö–æ–º–∞–Ω–¥–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫.
    :raises ValueError: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ.
    """

    existing_team = await get_player_team(session, player)
    if existing_team:
        raise ValueError("–ò–≥—Ä–æ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ.")

    normalized = team_name.strip()
    if not normalized:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    existing_name = await session.scalar(select(Team).where(func.lower(Team.name) == normalized.lower()))
    if existing_name:
        raise ValueError("–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    team = Team(name=normalized)
    session.add(team)
    await session.flush()

    session.add(TeamMember(team_id=team.id, player_id=player.id))
    await session.flush()
    return team


async def get_all_players(session: AsyncSession) -> Sequence[Player]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–∏—Å–∞–≤—à–∏—Ö –±–æ—Ç—É.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :return: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤.
    """

    return (await session.scalars(select(Player))).all()


async def get_players_without_team(session: AsyncSession) -> Sequence[Player]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ —Å–æ—Å—Ç–æ—è—â–∏—Ö –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :return: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã.
    """

    subquery = select(TeamMember.player_id)
    players = await session.scalars(
        select(Player).where(Player.id.notin_(subquery.scalar_subquery()))
    )
    return players.all()


async def get_team_members(session: AsyncSession, team_id: int) -> Sequence[Player]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param team_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã.
    :return: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤.
    """

    return (
        await session.scalars(
            select(Player)
            .join(TeamMember, TeamMember.player_id == Player.id)
            .where(TeamMember.team_id == team_id)
        )
    ).all()


async def get_active_game(session: AsyncSession) -> Game | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É (–ª—é–±—É—é, —á—Ç–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞).

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :return: –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –∏–ª–∏ None.
    """

    return await session.scalar(
        select(Game).where(Game.status != "finished").order_by(Game.created_at.desc())
    )


async def create_game(session: AsyncSession, owner_user_id: int) -> Game:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —Å—Ç–∞—Ç—É—Å–µ idle.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param owner_user_id: Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :return: –°–æ–∑–¥–∞–Ω–Ω–∞—è –∏–≥—Ä–∞.
    """

    game = Game(owner_user_id=owner_user_id, status="idle")
    session.add(game)
    await session.flush()
    return game


async def ensure_participants(session: AsyncSession, game: Game) -> None:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π GameParticipant –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param game: –¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞.
    :return: None
    """

    existing_pairs = set(
        await session.scalars(
            select(GameParticipant.team_id).where(GameParticipant.game_id == game.id)
        )
    )
    teams = (await session.scalars(select(Team))).all()
    for team in teams:
        if team.id not in existing_pairs:
            session.add(GameParticipant(game_id=game.id, team_id=team.id, score=0))
    await session.flush()


async def start_game(session: AsyncSession, game: Game) -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∏–≥—Ä—É –≤ —Å—Ç–∞—Ç—É—Å running –∏ –≥–æ—Ç–æ–≤–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param game: –ò–≥—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.
    :return: None
    """

    game.status = "running"
    game.finished_at = None
    await ensure_participants(session, game)
    await session.flush()
    await reset_round_state(game.id)


async def start_question(session: AsyncSession, game: Game) -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∏–≥—Ä—É –≤ —Å—Ç–∞—Ç—É—Å question (–∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ ¬´–ë–ê–ó–ó–ï–†¬ª).

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param game: –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞.
    :return: None
    """

    game.status = "question"
    await reset_round_state(game.id)
    await session.flush()


async def finish_question(session: AsyncSession, game: Game) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä—É –≤ —Å—Ç–∞—Ç—É—Å running (–≤–æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω).

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param game: –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞.
    :return: None
    """

    game.status = "running"
    await reset_round_state(game.id)
    await session.flush()


async def finish_game(session: AsyncSession, game: Game) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param game: –ò–≥—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    :return: None
    """

    game.status = "finished"
    game.finished_at = datetime.now(UTC)
    await reset_round_state(game.id)
    await session.flush()


async def press_buzzer(session: AsyncSession, game: Game, player: Player) -> BuzzerResult:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´–ë–ê–ó–ó–ï–†¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param game: –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞.
    :param player: –ò–≥—Ä–æ–∫, –Ω–∞–∂–∞–≤—à–∏–π –∫–Ω–æ–ø–∫—É.
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –ø–æ–∑–∏—Ü–∏–µ–π.
    """

    if game.status != "question":
        return BuzzerResult("‚ùó –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –æ—Ç –≤–µ–¥—É—â–µ–≥–æ.", None, None)

    team = await get_player_team(session, player)
    if not team:
        return BuzzerResult(
            "üë• –¢—ã –µ—â—ë –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.",
            None,
            None,
        )

    await ensure_participants(session, game)

    state = get_state(game.id)
    async with state.lock:
        if team.id in state.queue:
            position = state.queue.index(team.id) + 1
            return BuzzerResult(f"‚ÑπÔ∏è –¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, —Ç–≤–æ–π –Ω–æ–º–µ—Ä ‚Äî ‚Ññ{position}.", position, team)
        state.queue.append(team.id)
        position = len(state.queue)

    if position == 1:
        return BuzzerResult("–í—ã –ø–µ—Ä–≤—ã–µ! üî• –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å.", position, team)
    return BuzzerResult(f"–ó–∞–ø–∏—Å–∞–ª! –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è ‚Äî ‚Ññ{position}.", position, team)


async def pop_queue(game: Game) -> tuple[int | None, list[int]]:
    """
    –£–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.

    :param game: –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞.
    :return: –ö–æ—Ä—Ç–µ–∂ (—É–¥–∞–ª—ë–Ω–Ω—ã–π team_id –∏–ª–∏ None, —Ç–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å).
    """

    state = get_state(game.id)
    async with state.lock:
        removed = state.queue.pop(0) if state.queue else None
        return removed, list(state.queue)


async def current_queue(game: Game) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏.

    :param game: –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞.
    :return: –°–ø–∏—Å–æ–∫ team_id.
    """

    state = get_state(game.id)
    async with state.lock:
        return list(state.queue)


async def award_score(session: AsyncSession, game: Game, team_id: int, points: int = 1) -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–∞–º–∫–∞—Ö –∏–≥—Ä—ã.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param game: –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞.
    :param team_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã.
    :param points: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).
    :return: None
    """

    participant = await session.scalar(
        select(GameParticipant).where(
            GameParticipant.game_id == game.id, GameParticipant.team_id == team_id
        )
    )
    if participant is None:
        participant = GameParticipant(game_id=game.id, team_id=team_id, score=0)
        session.add(participant)
        await session.flush()
    participant.score += points
    await session.flush()


async def get_scores(session: AsyncSession, game: Game) -> list[tuple[str, int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å—á—ë—Ç–∞ –¥–ª—è –∏–≥—Ä—ã.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param game: –ò–≥—Ä–∞.
    :return: –°–ø–∏—Å–æ–∫ –ø–∞—Ä (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, —Å—á—ë—Ç).
    """

    rows = (
        await session.execute(
            select(Team.name, GameParticipant.score)
            .join(Team, Team.id == GameParticipant.team_id)
            .where(GameParticipant.game_id == game.id)
            .order_by(GameParticipant.score.desc(), Team.name.asc())
        )
    ).all()
    return [(row[0], row[1]) for row in rows]


async def teams_by_ids(session: AsyncSession, team_ids: Iterable[int]) -> dict[int, Team]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥–∞ -> –æ–±—ä–µ–∫—Ç Team.

    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param team_ids: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.
    :return: –°–ª–æ–≤–∞—Ä—å id -> Team.
    """

    ids = list(team_ids)
    if not ids:
        return {}
    teams = (await session.scalars(select(Team).where(Team.id.in_(ids)))).all()
    return {team.id: team for team in teams}
