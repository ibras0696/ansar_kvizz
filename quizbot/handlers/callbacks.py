from __future__ import annotations

from contextlib import suppress

from aiogram import F, Router
from aiogram.types import CallbackQuery

from quizbot.config import settings
from quizbot.db import SessionLocal
from quizbot.keyboards import (
    ADMIN_CORRECT_PREFIX,
    ADMIN_FINISH_GAME_CB,
    ADMIN_SHOW_SCORES_CB,
    ADMIN_START_GAME_CB,
    ADMIN_START_QUESTION_CB,
    ADMIN_WRONG_CB,
    PLAYER_BUZZER_CB,
    PLAYER_REGISTER_CB,
    admin_answer_kb,
    admin_panel_kb,
    player_menu_kb,
)
from quizbot.services import registration_state
from quizbot.services.game_service import (
    award_score,
    create_game,
    finish_game,
    finish_question,
    get_active_game,
    get_all_players,
    get_or_create_player,
    get_player_team,
    get_players_without_team,
    get_scores,
    get_team_members,
    pop_queue,
    press_buzzer,
    start_game,
    start_question,
    teams_by_ids,
)

router = Router()


def _is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω.
    """

    return user_id in settings.default_admin_ids


async def _send_bulk(bot, players, text: str, reply_markup=None) -> None:
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫—É –∏–≥—Ä–æ–∫–æ–≤.

    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    :param players: –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Player.
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    :return: None
    """

    for player in players:
        try:
            await bot.send_message(player.tg_user_id, text, reply_markup=reply_markup)
        except Exception:
            continue


async def _notify_team(bot, session, team_id: int, text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã.

    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î.
    :param team_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã.
    :param text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    :return: None
    """

    members = await get_team_members(session, team_id)
    await _send_bulk(bot, members, text)


@router.callback_query(F.data == PLAYER_REGISTER_CB)
async def on_player_register(callback: CallbackQuery) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param callback: CallbackQuery –æ—Ç Telegram.
    :return: None
    """

    user = callback.from_user
    if not user:
        return

    registration_state.request_name(user.id)
    if callback.message:
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá")
    await callback.answer("–ñ–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", show_alert=False)


@router.callback_query(F.data == PLAYER_BUZZER_CB)
async def on_player_buzzer(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ ¬´–ë–ê–ó–ó–ï–†¬ª –æ–±—ã—á–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º.

    :param callback: CallbackQuery –æ—Ç Telegram.
    :return: None
    """

    user = callback.from_user
    if not user:
        return

    async with SessionLocal() as session:
        game = await get_active_game(session)
        if not game:
            await callback.answer("‚ùó –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ü–æ–¥–æ–∂–¥–∏ —Å–∏–≥–Ω–∞–ª –≤–µ–¥—É—â–µ–≥–æ.", show_alert=True)
            return

        player = await get_or_create_player(
            session,
            tg_user_id=user.id,
            username=user.username,
            full_name=" ".join(filter(None, [user.first_name, user.last_name])),
        )
        result = await press_buzzer(session, game, player)
        await session.commit()

    await callback.answer(result.message, show_alert=False)

    if result.position == 1 and result.team:
        await callback.bot.send_message(
            game.owner_user_id,
            f"üî• –ö–æ–º–∞–Ω–¥–∞ ¬´{result.team.name}¬ª –∂–º—ë—Ç –ø–µ—Ä–≤–æ–π! –û—Ç–º–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
            reply_markup=admin_answer_kb(result.team.id),
        )
        async with SessionLocal() as session:
            await _notify_team(
                callback.bot,
                session,
                result.team.id,
                "–í—ã –ø–µ—Ä–≤—ã–µ! üì£ –°–æ–æ–±—â–∏—Ç–µ –≤–µ–¥—É—â–µ–º—É, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—á–∞—Ç—å.",
            )


@router.callback_query(F.data == ADMIN_START_GAME_CB)
async def on_admin_start_game(callback: CallbackQuery) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞).

    :param callback: CallbackQuery –æ—Ç Telegram.
    :return: None
    """

    user = callback.from_user
    if not user or not _is_admin(user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    async with SessionLocal() as session:
        game = await get_active_game(session)
        if not game:
            game = await create_game(session, owner_user_id=user.id)
        else:
            game.owner_user_id = user.id

        await start_game(session, game)

        all_players = await get_all_players(session)
        without_team = {player.id for player in await get_players_without_team(session)}
        with_team = [player for player in all_players if player.id not in without_team]
        without_team_players = [player for player in all_players if player.id in without_team]

        await session.commit()

    await callback.answer("–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    if callback.message:
        await callback.message.edit_text(
            "–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ üöÄ\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å¬ª.",
            reply_markup=admin_panel_kb("running"),
        )

    await _send_bulk(
        callback.bot,
        with_team,
        "–ò–≥—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞! ‚ö° –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=player_menu_kb(has_team=True, can_press=False),
    )
    await _send_bulk(
        callback.bot,
        without_team_players,
        "–ò–≥—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞, –Ω–æ —É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã. üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –µ—ë —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.",
        reply_markup=player_menu_kb(has_team=False, can_press=False),
    )


@router.callback_query(F.data == ADMIN_START_QUESTION_CB)
async def on_admin_start_question(callback: CallbackQuery) -> None:
    """
    –°—Ç–∞—Ä—Ç—É–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (–æ—á–µ—Ä–µ–¥—å –∏ –Ω–∞–∂–∏–º–∞–Ω–∏—è).

    :param callback: CallbackQuery –æ—Ç Telegram.
    :return: None
    """

    user = callback.from_user
    if not user or not _is_admin(user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    async with SessionLocal() as session:
        game = await get_active_game(session)
        if not game or game.status == "finished":
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", show_alert=True)
            return

        await start_question(session, game)

        players = await get_all_players(session)
        without_team_ids = {p.id for p in await get_players_without_team(session)}
        ready_players = [p for p in players if p.id not in without_team_ids]

        await session.commit()

    await callback.answer("–í–æ–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω.")
    if callback.message:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚ùì\n–ñ–¥—É –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ ¬´–ë–ê–ó–ó–ï–†¬ª.",
            reply_markup=admin_panel_kb("question"),
        )

    await _send_bulk(
        callback.bot,
        ready_players,
        "‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å! –ö—Ç–æ –ø–µ—Ä–≤—ã–π –Ω–∞–∂–º—ë—Ç ¬´–ë–ê–ó–ó–ï–†¬ª, —Ç–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç.",
        reply_markup=player_menu_kb(has_team=True, can_press=True),
    )


@router.callback_query(F.data == ADMIN_FINISH_GAME_CB)
async def on_admin_finish_game(callback: CallbackQuery) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∏—Ç–æ–≥.

    :param callback: CallbackQuery –æ—Ç Telegram.
    :return: None
    """

    user = callback.from_user
    if not user or not _is_admin(user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    async with SessionLocal() as session:
        game = await get_active_game(session)
        if not game:
            await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
            return

        await finish_game(session, game)
        scores = await get_scores(session, game)
        players = await get_all_players(session)
        await session.commit()

    await callback.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    if callback.message:
        await callback.message.edit_text(
            "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞—É–Ω–¥!", reply_markup=admin_panel_kb("finished")
        )

    table = "\n".join(
        f"{idx+1}. {team} ‚Äî {score}" for idx, (team, score) in enumerate(scores)
    ) or "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è."
    await callback.bot.send_message(user.id, f"üèÅ –ò—Ç–æ–≥–∏ –∏–≥—Ä—ã:\n{table}")
    await _send_bulk(
        callback.bot,
        players,
        f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Ç–æ–≥–∏:\n{table}",
    )


@router.callback_query(F.data == ADMIN_SHOW_SCORES_CB)
async def on_admin_show_scores(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É –æ—á–∫–æ–≤.

    :param callback: CallbackQuery –æ—Ç Telegram.
    :return: None
    """

    user = callback.from_user
    if not user or not _is_admin(user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    async with SessionLocal() as session:
        game = await get_active_game(session)
        if not game:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", show_alert=True)
            return
        scores = await get_scores(session, game)

    table = "\n".join(
        f"{idx+1}. {team} ‚Äî {score}" for idx, (team, score) in enumerate(scores)
    ) or "–ü–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤."
    await callback.answer("–ü–æ–∫–∞–∑–∞–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—á–∫–∏.")
    await callback.bot.send_message(user.id, f"üìä –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏:\n{table}")


@router.callback_query(F.data.startswith(ADMIN_CORRECT_PREFIX))
async def on_admin_correct(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É ¬´–≤–µ—Ä–Ω–æ¬ª –æ—Ç –≤–µ–¥—É—â–µ–≥–æ.

    :param callback: CallbackQuery –æ—Ç Telegram.
    :return: None
    """

    user = callback.from_user
    if not user or not _is_admin(user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    try:
        team_id = int(callback.data.split(":", 1)[1])
    except (ValueError, AttributeError, IndexError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    async with SessionLocal() as session:
        game = await get_active_game(session)
        if not game:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", show_alert=True)
            return

        removed_team_id, queue = await pop_queue(game)
        await award_score(session, game, team_id)
        await finish_question(session, game)
        scores = await get_scores(session, game)
        await session.commit()

    await callback.answer("–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.")
    table = "\n".join(
        f"{idx+1}. {team} ‚Äî {score}" for idx, (team, score) in enumerate(scores)
    ) or "–ü–æ–∫–∞ –ø—É—Å—Ç–æ."
    with suppress(Exception):
        if callback.message:
            await callback.message.delete()
    await callback.bot.send_message(
        user.id,
        f"üìä –û—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n{table}",
        reply_markup=admin_panel_kb("running"),
    )
    async with SessionLocal() as session:
        await _notify_team(
            callback.bot,
            session,
            team_id,
            "‚úÖ –û—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω! –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏–ª–∞ –±–∞–ª–ª.",
        )


@router.callback_query(F.data == ADMIN_WRONG_CB)
async def on_admin_wrong(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É ¬´–Ω–µ–≤–µ—Ä–Ω–æ¬ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.

    :param callback: CallbackQuery –æ—Ç Telegram.
    :return: None
    """

    user = callback.from_user
    if not user or not _is_admin(user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    async with SessionLocal() as session:
        game = await get_active_game(session)
        if not game:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", show_alert=True)
            return

        removed_team_id, queue_after = await pop_queue(game)

        if not queue_after:
            await finish_question(session, game)
            team_map = {}
            if removed_team_id is not None:
                team_map = await teams_by_ids(session, [removed_team_id])
            await session.commit()
            await callback.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
            with suppress(Exception):
                if callback.message:
                    await callback.message.delete()
            if removed_team_id is not None:
                removed_team = team_map.get(removed_team_id)
                if removed_team:
                    await _notify_team(
                        callback.bot,
                        session,
                        removed_team_id,
                        "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                    )
                    await callback.bot.send_message(
                        user.id,
                        f"–ö–æ–º–∞–Ω–¥–∞ ¬´{removed_team.name}¬ª –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –û—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.",
                        reply_markup=admin_panel_kb("running"),
                    )
                    return
            await callback.bot.send_message(
                user.id,
                "–û—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞–∂–º–∏ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                reply_markup=admin_panel_kb("running"),
            )
            return

        await session.commit()

    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ.")
    with suppress(Exception):
        if callback.message:
            await callback.message.delete()
    async with SessionLocal() as session:
        team_map = await teams_by_ids(session, [removed_team_id] + queue_after if removed_team_id else queue_after)
        if removed_team_id is not None:
            removed_team = team_map.get(removed_team_id)
            if removed_team:
                await _notify_team(
                    callback.bot, session, removed_team_id, "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
                )

        next_team_id = queue_after[0]
        next_team = team_map.get(next_team_id)
        if next_team:
            await _notify_team(
                callback.bot, session, next_team_id, "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –í—ã –Ω–∞ –æ—á–µ—Ä–µ–¥–∏!"
            )
            await callback.bot.send_message(
                user.id,
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ ¬´{next_team.name}¬ª.",
                reply_markup=admin_answer_kb(next_team_id),
            )
