from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from quizbot.config import settings
from quizbot.db import SessionLocal
from quizbot.keyboards import admin_panel_kb, player_menu_kb
from quizbot.services import registration_state
from quizbot.services.game_service import (
    create_game,
    ensure_participants,
    get_active_game,
    get_or_create_player,
    get_player_team,
    register_team,
)

router = Router()


def _status_label(status: str | None) -> str:
    mapping = {
        "idle": "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
        "running": "–∏–¥—ë—Ç –∏–≥—Ä–∞",
        "question": "–∏–¥—ë—Ç –≤–æ–ø—Ä–æ—Å",
        "finished": "–∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
    }
    return mapping.get(status or "", "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")


def _is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–π.
    """

    return user_id in settings.default_admin_ids


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.

    :param message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """

    if not message.from_user:
        return

    user = message.from_user
    async with SessionLocal() as session:
        player = await get_or_create_player(
            session,
            tg_user_id=user.id,
            username=user.username,
            full_name=" ".join(filter(None, [user.first_name, user.last_name])),
        )
        game = await get_active_game(session)

        if _is_admin(user.id):
            if not game:
                game = await create_game(session, owner_user_id=user.id)
            elif game.owner_user_id != user.id:
                game.owner_user_id = user.id

            await session.commit()
            status_text = _status_label(game.status)
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç, –≤–µ–¥—É—â–∏–π! üéôÔ∏è\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—É–Ω–¥–æ–º.",
                reply_markup=admin_panel_kb(game.status),
            )
            return

        team = await get_player_team(session, player)
        status_text = _status_label(game.status if game else None)
        can_press = bool(game and game.status == "question" and team)

        await session.commit()
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üîî –≠—Ç–æ –±–æ—Ç ¬´–ë–ê–ó–ó–ï–†¬ª.\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
            "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤–µ–¥—É—â–µ–≥–æ.",
            reply_markup=player_menu_kb(has_team=team is not None, can_press=can_press),
        )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """

    await message.answer(
        "‚ÑπÔ∏è <b>–ö–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ:</b>\n"
        "‚Äî –í–µ–¥—É—â–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—É–Ω–¥—ã —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å.\n"
        "‚Äî –ò–≥—Ä–æ–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –∂–º—É—Ç ¬´–ë–ê–ó–ó–ï–†¬ª –ø–æ —Å–∏–≥–Ω–∞–ª—É.\n"
        "‚Äî –ë–æ—Ç —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏ —Å—á–∏—Ç–∞–µ—Ç –æ—á–∫–∏ –¥–æ —Ñ–∏–Ω–∞–ª–∞."
    )


@router.message()
async def handle_registration_input(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã.

    :param message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :return: None
    """

    if not message.from_user or not message.text:
        return

    user_id = message.from_user.id
    if not registration_state.is_pending(user_id):
        return

    async with SessionLocal() as session:
        player = await get_or_create_player(
            session,
            tg_user_id=user_id,
            username=message.from_user.username,
            full_name=" ".join(filter(None, [message.from_user.first_name, message.from_user.last_name])),
        )

        try:
            team = await register_team(session, player, message.text)
        except ValueError as exc:
            await session.rollback()
            await message.answer(f"‚ö†Ô∏è {exc}")
            return

        game = await get_active_game(session)
        if game:
            await ensure_participants(session, game)
        await session.commit()

    registration_state.clear(user_id)
    await message.answer(
        f"–ì–æ—Ç–æ–≤–æ! üéâ –¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ ¬´{team.name}¬ª. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é."
    )
